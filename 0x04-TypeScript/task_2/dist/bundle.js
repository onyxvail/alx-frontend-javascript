!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t){var r=function(){function e(){}return e.prototype.workFromHome=function(){return"Working from home"},e.prototype.getCoffeeBreak=function(){return"Getting a coffee break"},e.prototype.workDirectorTasks=function(){return"Getting to director tasks"},e}(),n=function(){function e(){}return e.prototype.workFromHome=function(){return"Cannot work from home"},e.prototype.getCoffeeBreak=function(){return"Cannot have a break"},e.prototype.workTeacherTasks=function(){return"Getting to work"},e}();function o(e){return"number"==typeof e&&e<500?new n:new r}function u(e){return function(e){return e instanceof r}(e)?e.workDirectorTasks():e.workTeacherTasks()}function i(e){switch(e){case"Math":return"Teaching Math";case"History":return"Teaching History";default:return""}}console.log(u(o(200))),console.log(u(o(1e3))),console.log(i("Math")),console.log(i("History"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,